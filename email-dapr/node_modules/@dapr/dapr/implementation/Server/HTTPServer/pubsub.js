"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../../logger/Logger");
// https://docs.dapr.io/reference/api/pubsub_api/
class HTTPServerPubSub {
    constructor(server) {
        this.server = server;
        this.logger = new Logger_1.Logger("HTTPServer", "PubSub", server.client.options.logger);
    }
    subscribe(pubsubName, topic, cb, route = "") {
        return __awaiter(this, void 0, void 0, function* () {
            if (!route) {
                route = `route-${pubsubName}-${topic}`;
            }
            // Register the handler
            yield this.server.getServerImpl().registerPubSubSubscriptionRoute(pubsubName, topic, route);
            this.server.getServer().post(`/${route}`, (req, res) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                // @ts-ignore
                // Parse the data of the body, we prioritize fetching the data key in body if possible
                // i.e. Redis returns { data: {} } and other services return {}
                // @todo: This will be deprecated in an upcoming major version and only req.body will be returned
                const data = ((_a = req === null || req === void 0 ? void 0 : req.body) === null || _a === void 0 ? void 0 : _a.data) || (req === null || req === void 0 ? void 0 : req.body);
                // Process our callback
                try {
                    yield cb(data);
                }
                catch (e) {
                    this.logger.error(`subscribe failed: ${e}`);
                    return res.send({ success: false });
                }
                // Let Dapr know that the message was processed correctly
                this.logger.debug(`[route-${topic}] Ack'ing the message`);
                return res.send({ success: true });
            }));
        });
    }
}
exports.default = HTTPServerPubSub;
