import { Temporal } from "@js-temporal/polyfill";
/**
 * Actor runtime configuration that configures the Actor behavior in the Dapr Runtime
 */
export default class ActorRuntimeConfig {
    private actorIdleTimeout;
    private actorScanInterval;
    private drainOngoingCallTimeout;
    private drainRebalancedActors;
    /**
     *
     * @param actorIdleTimeout The timeout before deactivating an idle actor
     * @param actorScanInterval The duration which specifies how often to scan for actors
     * to deactivate idle actors. Actors that have been idle longer than actorIdleTimeout will be deactivated
     * @param drainOngoingCallTimeout The duration when in the process of draining rebalanced actors.
     * This specifies the timeout for the current active actor method to finish.
     * If there is no current actor method call, this is ignored.
     * @param drainRebalancedActors If true, Dapr will wait for drainOngoingCallTimeout
     * to allow a current actor call to complete before trying to deactivate an actor
     */
    constructor(actorIdleTimeout?: Temporal.Duration, actorScanInterval?: Temporal.Duration, drainOngoingCallTimeout?: Temporal.Duration, drainRebalancedActors?: boolean);
    getActorIdleTimeout(): number;
    getActorScanInterval(): number;
    getDrainOngoingCallTimeout(): number;
    getDrainRebalancedActors(): boolean;
    toDictionary(): {
        actorIdleTimeout: string;
        actorScanInterval: string;
        drainOngoingCallTimeout: string;
        drainRebalancedActors: boolean;
    };
}
